{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onclose","e","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItemAvatar","ListItem","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","add","timestamp","FieldValue","serverTimestamp","preventDefault","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAaeA,EAXIC,IAASC,cAAc,CACtCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEGC,Y,4ECRhBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAG,EAAG,QAyCpBC,MAtCf,SAAcC,GACV,IAAMC,EAAUhB,IADC,EAEMiB,oBAAS,GAFf,mBAEVC,EAFU,KAELC,EAFK,OAGOF,qBAHP,mBAGVG,EAHU,KAGJC,EAHI,KAejB,OACI,oCACA,kBAACC,EAAA,EAAD,CACGJ,KAAMA,EACNK,QAAS,SAAAC,GAAC,OAAGL,GAAQ,KACrB,yBAAKM,UAAWT,EAAQb,OACpB,2BAAOuB,YAAcX,EAAMY,KAAKA,KAAMC,MAAQR,EAAOS,SAAU,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOH,UAC9F,kBAACI,EAAA,EAAD,CAAQC,QAfG,WAEd7C,EAAG8C,WAAW,SAASC,IAAIpB,EAAMY,KAAKS,IAAIC,IAAI,CAC7CV,KAAMP,GACL,CAACkB,OAAO,IACVnB,GAAQ,KAUL,iBAGP,kBAACoB,EAAA,EAAD,CAAMd,UAAU,cAChB,kBAACe,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAcC,QAAS5B,EAAMY,KAAKA,KAAMiB,UAAU,oBAEtD,4BAAQX,QAAS,SAAAT,GAAC,OAAGL,GAAQ,KAA7B,QACA,kBAAC,IAAD,CAAmBc,QAAS,SAAAH,GAAK,OAAI1C,EAAG8C,WAAW,SAASC,IAAIpB,EAAMY,KAAKS,IAAIS,e,2BCKxEC,MA7Cf,WAAgB,IAAD,EACa7B,mBAAS,IADtB,mBACN8B,EADM,KACCC,EADD,OAEY/B,mBAAS,IAFrB,mBAENG,EAFM,KAEAC,EAFA,KA0Bb,OApBA4B,qBAAU,WACR7D,EAAG8C,WAAW,SAASgB,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAC5DJ,EAASI,EAASC,KAAKC,KAAI,SAAAnB,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIT,KAAMQ,EAAIoB,OAAO5B,eAElE,IAiBD,yBAAKF,UAAU,OACb,+CACA,8BACA,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,sBACA,kBAACC,EAAA,EAAD,CAAO9B,MAASR,EAAOS,SAAU,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOH,WAElE,kBAACI,EAAA,EAAD,CAAQ2B,UAAWvC,EAAOwC,KAAK,SAAS3B,QAtB5B,SAACH,GAKf1C,EAAG8C,WAAW,SAAS2B,IAAI,CACzBlC,KAAMP,EACN0C,UAAWzE,IAASU,UAAUgE,WAAWC,oBAG3ClC,EAAMmC,iBAEN5C,EAAS,KAUmD6C,QAAQ,YAAYC,MAAM,WAApF,cAEA,4BACGpB,EAAMO,KAAI,SAAA3B,GAAI,OACb,kBAAC,EAAD,CAAMA,KAAMA,UChCFyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf255a94.chunk.js","sourcesContent":["import firebase from \"firebase\"\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseApp= firebase.initializeApp({\r\n    apiKey: \"AIzaSyA8qEphrawr_oM8SBLal4rN12MCEETK3j4\",\r\n    authDomain: \"todo-app-aa416.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-aa416.firebaseio.com\",\r\n    projectId: \"todo-app-aa416\",\r\n    storageBucket: \"todo-app-aa416.appspot.com\",\r\n    messagingSenderId: \"338055735774\",\r\n    appId: \"1:338055735774:web:c8a0e42b58f5ae1fea954f\",\r\n    measurementId: \"G-BD7M075EX5\"\r\n}); \r\nconst db= firebaseApp.firestore();\r\nexport default db;","import React, {useState} from 'react'\r\nimport db from './firebase'\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport { Button, List, ListItem, ListItemText, ListItemAvatar, Modal, makeStyles } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [open,setOpen] = useState(false);\r\n    const [input,setInput]= useState();\r\n    const handleOpen = () => {\r\n            setOpen(true);\r\n        };\r\n        const updateTodo =() => {\r\n            //update the todo with input text\r\n            db.collection('todos').doc(props.todo.id).set({\r\n             todo: input\r\n            },{merge: true})//this prevents overriding what is already there\r\n            setOpen(false);\r\n        }\r\n    //props are used to extraxt elements\r\n    return (\r\n        <>\r\n        <Modal\r\n           open={open}\r\n           onclose={e =>setOpen(false)}>\r\n           <div className={classes.paper}>\r\n               <input placeholder= {props.todo.todo} value ={input} onChange={event => setInput(event.target.value)}/>\r\n               <Button onClick={updateTodo}>Update Todo</Button>\r\n           </div>\r\n        </Modal>\r\n        <List className=\"todo__list\">\r\n        <ListItemAvatar>\r\n        </ListItemAvatar>\r\n        <ListItem>\r\n            <ListItemText primary={props.todo.todo} secondary=\"Dummy Deadline\"/>\r\n        </ListItem>\r\n        <button onClick={e =>setOpen(true)}>Edit</button>\r\n        <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()}/>\r\n        </List>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React , { useState, useEffect } from 'react';\nimport './App.css';\nimport Todo from './Todo'\nimport db from './firebase'\nimport firebase from 'firebase';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nfunction App() { \n  const [todos, setTodos] = useState([]);\n  const [input,setInput] = useState('');\n  //when the app loads ,we need to listen to the database and fetch new todos as they get added or removed\n  //it runs once the app loads'\n  //it listens everything changing in the firebase1\n  useEffect(() => {\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})))\n    })\n  }, [])//every time input loads this will work\n\n  const addTodo = (event) => {\n    //this will fireon when we click buttons\n    //it stores input it the todos and keep appending new input\n    //connecting our input to firebase\n     //timestamp is for order of events\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    //don't refresh the page while submitting\n    event.preventDefault();\n   // setTodos([...todos, input]);\n    setInput('');// to clear the input space after we click the add todo button\n  }\n  return (\n    <div className=\"App\">\n      <h1>Hello Friends!!</h1>\n      <form>\n      <FormControl>\n        <InputLabel>Write a to-do</InputLabel>\n        <Input value = {input} onChange={event => setInput(event.target.value)}/>\n      </FormControl>\n      <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\">Add To-do</Button>\n      </form>\n      <ul>\n        {todos.map(todo => (\n          <Todo todo={todo}/>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}